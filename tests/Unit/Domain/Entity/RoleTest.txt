<?php
/*
//
//  ______    _   _           _  __      _   _     ____   ___
// |  ____|  | | | |         | |/ _|    | | | |   |___ \ / _ \
// | |__ __ _| |_| |__   __ _| | |_ __ _| |_| |__   __) | | | |
// |  __/ _` | __| '_ \ / _` | |  _/ _` | __| '_ \ |__ <| | | |
// | | | (_| | |_| | | | (_| | | || (_| | |_| | | |___) | |_| |
// |_|  \__,_|\__|_| |_|\__,_|_|_| \__,_|\__|_| |_|____/ \___/
//
// Written by Fathalfath30.
// Email : fathalfath30@gmail.com
// Follow me on:
//  Github : https://github.com/fathalfath30
//  Gitlab : https://gitlab.com/Fathalfath30
//
*/

namespace Tests\Unit\Domain\Entity;

use App\Domain\Entity\Role as RoleEntity;
use Exception;
use Faker\Factory as Faker;
use Faker\Generator;
use Tests\TestCase;

class RoleTest extends TestCase {
  public function __construct(string $name) {
    parent::__construct($name);
  }

  /**
   * @return void
   * @test
   * @testdox it can make new role entity
   */
  public function itCanMakeNewRoleEntity() {
    try {
      $result = RoleEntity::make([
        RoleEntity::Id => '',
      ]);

      $this->assertInstanceOf(RoleEntity::class, $result);
    } catch(Exception $exception) {
      $this->assertNull($exception);
    }
  }
}
