<?php
/*
//
//  ______    _   _           _  __      _   _     ____   ___
// |  ____|  | | | |         | |/ _|    | | | |   |___ \ / _ \
// | |__ __ _| |_| |__   __ _| | |_ __ _| |_| |__   __) | | | |
// |  __/ _` | __| '_ \ / _` | |  _/ _` | __| '_ \ |__ <| | | |
// | | | (_| | |_| | | | (_| | | || (_| | |_| | | |___) | |_| |
// |_|  \__,_|\__|_| |_|\__,_|_|_| \__,_|\__|_| |_|____/ \___/
//
// Written by Fathalfath30.
// Email : fathalfath30@gmail.com
// Follow me on:
//  Github : https://github.com/fathalfath30
//  Gitlab : https://gitlab.com/Fathalfath30
//
*/

namespace Tests\Unit\UseCases\Authentication;

//use App\Http\Request\Login as LoginRequest;
//use App\Repository\User as UserRepository;
//use App\UseCases\Authentication\LoginUseCase;
//use Mockery\MockInterface;
//use PHPUnit\Exception;
use Tests\TestCase;
use Tests\TestData\UserTestData;

class LoginUseCaseTest extends TestCase {
  use UserTestData;

  /**
   * @return void
   * @test
   * @testdox it should generate jwt token if credential is valid
   */
  //  public function itShouldGenerateJwtTokenIfCredentialIsValid() {
  //    /** @var \App\Domain\Repository\IUserRepository $userRepoMock */
  //    $userRepoMock = $this->mock(UserRepository::class,
  //      function(MockInterface $mock) {
  //        $mock->shouldReceive('Get')
  //          ->withAnyArgs()
  //          ->once()
  //          ->andReturn($this->getValidUserEntity());
  //      });
  //
  //    try {
  //      $result = (new LoginUseCase($userRepoMock))
  //        ->execute($requestMock);
  //      $this->assertIsArray($result);
  //    } catch(Exception $exception) {
  //      $this->assertNull($exception);
  //    }
  //  }
}
